#!/usr/bin/env python
#
#
# Table Of Contents
# -----------------
# 1. Configuration Parser
# 2. Container Types
# 3. Source Control
# 4. Node Model
# 5. Command-Line Interface

from __future__ import print_function, division
import os, sys, subprocess, re, socket, shutil, collections
import time, tempfile, shlex, urlgrabber, urlgrabber.progress
import pwd, signal, smtplib, getpass
from os import path
from ConfigParser import SafeConfigParser, RawConfigParser
from StringIO import StringIO
from glob import glob


import pkg_resources  # part of setuptools
try:
	VERSION = pkg_resources.require("jvmctl")[0].version
except pkg_resources.DistributionNotFound:
	VERSION = 'unknown'

#----------------------------------------------------------------------
# 1. Configuration Parser
#----------------------------------------------------------------------

SYSTEM_CONF = '/etc/jvmctl.conf'
CONF_ROOT = '/etc/jvmctl/apps'
if path.exists('/opt/jetty/conf'):
    CONF_ROOT = '/opt/jetty/conf'

DEFAULTS = """
[jetty]
REPO=http://repo1.maven.org/maven2/org/eclipse/jetty/jetty-distribution/

[jvm]
CONTAINER=jetty
HEAP_SIZE=128m
HEAP_DUMP_PATH=/var/tmp/${NODE}.hprof
USER=webapp
JAVA_HOME=/usr/lib/jvm/java-1.8.0
JETTY_VERSION=9.2.5.v20141112
GIT_BRANCH=HEAD
NLA_ENVIRON=devel
ROOT_URL_PREFIX=/
JAVA_OPTS=
OOM_EMAIL=root@localhost
SOCKET=
SOCKET_USER=root
SOCKET_GROUP=root
SOCKET_MODE=0660
EXEC_PREFIX=
GC_LOG_OPTS=
WEBAPPS_PATH=

[systemd.service.Unit]
After=network.target remote-fs.target

[systemd.service.Service]
Restart=on-failure
StartLimitInterval=120
StartLimitBurst=5
StandardOutput=journal
StandardError=journal

[systemd.service.Install]
WantedBy=multi-user.target
"""
control_tools_root = path.dirname(path.dirname(path.realpath(__file__)))
commands = {}
groups = collections.OrderedDict()

def cli_command(group=None):
    if group not in groups:
        groups[group] = groups.get(group, [])
    def deco(func):
        commands[func.__name__] = func
        groups[group].append(func)
        return func
    return deco

def parse_shell_arrays(data):
    """
    Convert shell array syntax in legacy configs to ConfigParser's indentation based multiline
    values.
    (foo\nbar) => foo\n bar
    """
    out = ""
    pos = 0
    for m in re.finditer("(?m)^(?:\s*|^[^=]*=\s*)\(([^)]*)\)\s*$", data):
        body = m.group(1)
        body = body.replace('\n', '\n ')
        out += data[:m.start(1)] + body
        pos = m.end()
    out += data[pos:]
    return out

class RawConfig(RawConfigParser):
    def optionxform(self, option):
        """Override optionxform to preserve case"""
        return option

    def write(self, fp):
        """Override to remove spaces around equals"""
        for section in self._sections:
            fp.write("[%s]\n" % section)
            for (key, value) in self._sections[section].items():
                if key != "__name__":
                    fp.write("%s=%s\n" %
                             (key, str(value).replace('\n', '\n\t')))
            fp.write("\n")

class Config(SafeConfigParser):
    def __init__(self, configfile):
        SafeConfigParser.__init__(self)
        f = open(configfile)
        try:
            text = f.read()
        finally:
            f.close()
        text = re.sub("(?m)^\s*#.*", "", text)
        text = parse_shell_arrays(text)
        text = '[jvm]\n' + text
        text = re.sub("(?m)^\s*export\s+", "", text)
        self.readfp(StringIO(DEFAULTS))
        self.load_system_config()
        self.readfp(StringIO(text))
        self.migrate_legacy()

    def load_system_config(self):
        if os.path.exists(SYSTEM_CONF):
            with open(SYSTEM_CONF) as f:
                self.readfp(f)

    def optionxform(self, option):
        """Override optionxform to preserve case"""
        return option

    def migrate_rename(self, oldname, newname):
        if self.has_option('jvm', oldname):
            self.set('jvm', newname, self.get('jvm', oldname))
            self.remove_option('jvm', oldname)

    def migrate_legacy(self):
        """Migrate legacy config fields to the new format"""
        self.migrate_rename('JETTY_USER', 'USER')

    def systemd_environment(self):
        s = ""
        for k, v in self.items('jvm'):
            if '"' in v:
                s += '"' + k + '=' + v.replace('"', '\\"') + '" '
            else:
                s += k + '=' + v + ' '
        return s


#----------------------------------------------------------------------
# 2. Container Types
#----------------------------------------------------------------------

class NoneContainer:
    def __init__(self, node):
        self.node = node
        self.properties = {}
        self.jvm_opts = node.config.get('jvm', 'APP_OPTS').split(' ')

    def deploy(self):
        pass

JETTY_XML = """<?xml version="1.0"?>
<!-- Auto-generated by jvmctl. Edit {node.config_file} instead -->
<Configure id="Contexts" class="org.eclipse.jetty.server.handler.ContextHandlerCollection">
  {context_xml}
</Configure>
"""

JETTY_CONTEXT_XML = """
<Call name="addHandler"><Arg><New class="org.eclipse.jetty.webapp.WebAppContext">
  <Set name="contextPath">{context_path}</Set>
  <Set name="war">{war}</Set>
  <Get name="securityHandler">
    <Set name="loginService">
      <New class="org.eclipse.jetty.security.HashLoginService">
        <Set name="name">Realm</Set>
        <Set name="config">/dev/null</Set>
      </New>
    </Set>
  </Get>
</New></Arg></Call>
"""

JETTY_HTTP_XML = """<?xml version="1.0"?>
<!DOCTYPE Configure PUBLIC "-//Jetty//Configure//EN" "http://www.eclipse.org/jetty/configure_9_0.dtd">
<!-- Auto-generated by jvmctl. Edit {node.config_file} instead -->
<Configure id="Server" class="org.eclipse.jetty.server.Server">
  <Call name="addConnector">
    <Arg>
      <New class="org.eclipse.jetty.server.ServerConnector">
        <Arg name="server"><Ref refid="Server" /></Arg>
        <Arg name="acceptors" type="int"><Property name="http.acceptors" default="-1"/></Arg>
        <Arg name="selectors" type="int"><Property name="http.selectors" default="-1"/></Arg>
        <Arg name="factories">
          <Array type="org.eclipse.jetty.server.ConnectionFactory">
            <Item>
              <New class="org.eclipse.jetty.server.HttpConnectionFactory">
                <Arg name="config"><Ref refid="httpConfig" /></Arg>
              </New>
            </Item>
          </Array>
        </Arg>
        <Set name="host"><Property name="jetty.host" /></Set>
        <Set name="port"><Property name="jetty.port" default="80" /></Set>
        <Set name="idleTimeout"><Property name="http.timeout" default="30000"/></Set>
        <Set name="soLingerTime"><Property name="http.soLingerTime" default="-1"/></Set>
        <Set name="acceptorPriorityDelta"><Property name="http.acceptorPriorityDelta" default="0"/></Set>
        <Set name="acceptQueueSize"><Property name="http.acceptQueueSize" default="0"/></Set>
        <Set name="inheritChannel"><Property name="http.inheritChannel" default="true"/></Set>
      </New>
    </Arg>
  </Call>
</Configure>
"""

JETTY_FORWARDED_XML = """<?xml version="1.0"?>
<!-- Auto-generated by jvmctl. Edit {node.config_file} instead -->
<!-- Obey X-Forwared-* headers -->
<Configure id="httpConfig" class="org.eclipse.jetty.server.HttpConfiguration">
    <Call name="addCustomizer">
      <Arg><New class="org.eclipse.jetty.server.ForwardedRequestCustomizer"/></Arg>
    </Call>
</Configure>
"""

class JettyContainer:
    cachedir = '/var/cache/jvmctl/container/'
    def __init__(self, node):
        self.node = node
        self.version = node.config.get('jvm', 'JETTY_VERSION')
        self.home = path.join(self.cachedir, "jetty-" + self.version)
        self.properties = {
            'jetty.base': self.node.basedir
        }
        self.jvm_opts = ['-jar', path.join(self.home, "start.jar")]
        self.webapps_path = node.config.get('jvm', 'WEBAPPS_PATH')
        if not self.webapps_path:
            self.webapps_path = self.node.apps_path

    def deploy(self):
        self.fetch_jetty()
        self.configure_jetty()

    def fetch_jetty(self):
        """Download the requested version of Jetty"""
        if path.exists(self.home):
            return
        url = self.node.config.get('jetty','REPO') + self.version + "/jetty-distribution-" + self.version + ".tar.gz"
        if not path.exists(self.cachedir):
            os.makedirs(self.cachedir)
        f = tempfile.mktemp(prefix='jetty-' + self.version + '-', suffix='.tar.gz')
        try:
            print("Downloading Jetty from " + url)
            meter = urlgrabber.progress.TextMeter()
            urlgrabber.urlgrab(url, filename=f, progress_obj=meter)
            subprocess.check_call(["tar", "-x", "-C", self.cachedir, "-f", f])
        finally:
            os.remove(f)
        os.rename(path.join(self.cachedir, 'jetty-distribution-' + self.version), self.home)

    def configure_jetty(self):
        """Generate jetty XML configuration"""
        node = self.node
        if not path.exists(node.basedir):
            os.makedirs(node.basedir)
        if self.version.startswith("8."):
            self.configure_jetty8()
        else:
            self.configure_jetty9()

    def configure_jetty8(self):
        node = self.node
        liblink = path.join(node.basedir, 'lib')
        if not path.exists(liblink):
            os.symlink(path.join(self.home, 'lib'), liblink)
        with open(path.join(node.basedir, "context.xml"), 'w') as f:
            contexts = []
            for war in self.discover_contexts():
                contexts.append(JETTY_CONTEXT_XML.format(context_path=self.context_path_for_war(war), war=war))
            f.write(JETTY_XML.format(node=node, context_xml=''.join(contexts)))
        with open(path.join(node.basedir, "start.ini"), 'w') as f:
            f.write("# Auto-generated by jvmctl. Edit " + node.config_file + " instead\n")
            f.write("OPTIONS=Server,jsp,jmx,resources,websocket,ext,plus,annotations")
            f.write("\n")
            f.write('jetty.port=' + node.config.get('jvm', 'PORT') + '\n')
            f.write("\n")
            f.write(self.home + "/etc/jetty.xml\n")
            f.write(self.home + "/etc/jetty-annotations.xml\n")
            f.write(node.basedir + "/context.xml\n")

    def configure_jetty9(self):
        node = self.node
        with open(path.join(node.basedir, "context.xml"), 'w') as f:
            contexts = []
            for war in self.discover_contexts():
                contexts.append(JETTY_CONTEXT_XML.format(context_path=self.context_path_for_war(war), war=war))
            f.write(JETTY_XML.format(node=node, context_xml=''.join(contexts)))
        with open(path.join(node.basedir, "http.xml"), 'w') as f:
            f.write(JETTY_HTTP_XML.format(node=node))
        with open(path.join(node.basedir, "forwarded.xml"), 'w') as f:
            f.write(JETTY_FORWARDED_XML.format(node=node))
        with open(path.join(node.basedir, "start.ini"), 'w') as f:
            f.write("# Auto-generated by jvmctl. Edit " + node.config_file + " instead\n")
            f.write("--module=server\n--module=webapp\n--module=jsp\n")
            f.write("\n")
            f.write('jetty.port=' + node.config.get('jvm', 'PORT') + '\n')
            f.write("\n")
            f.write(node.basedir + "/context.xml\n")
            f.write(node.basedir + "/http.xml\n")
            f.write(node.basedir + "/forwarded.xml\n")

    def discover_contexts(self):
        if not path.exists(self.webapps_path):
            return
        for fn in os.listdir(self.webapps_path):
            f = path.join(self.webapps_path, fn)
            if fn.startswith('.'):
                continue
            elif path.isdir(f) or fn.endswith('.war'):
                yield f

    def context_path_for_war(self, war):
        prefix = self.node.config.get('jvm', 'ROOT_URL_PREFIX')
        basename = path.basename(war)
        if basename == 'ROOT' or basename == 'ROOT.war':
            return prefix
        if basename.endswith('.war'):
            return path.join(prefix, basename[:-4])
        return path.join(prefix, basename)

CONTAINER_TYPES = {
    'jetty': JettyContainer,
    'none': NoneContainer,
}

#----------------------------------------------------------------------
# 3. Source Control
#----------------------------------------------------------------------

class Repo:
    def __init__(self, url, node):
        self.url = url
        self.node = node

    @property
    def module(self):
        """
        Munge the URL to try to come up with some sort of basic name
        for this module.

        eg /whatsit/tags/1.2.3 => whatsit
           /whatsit/trunk@1234 => whatsit
           /whatsit
        """
        module = re.sub('/trunk/*', '', self.url)
        module = re.sub('/tags/[^/][^/]*/*', '', module)
        module = re.sub('/*$', '', module)
        module = re.sub('.*/', '', module)
        module = re.sub('@[^@/]*$', '', module)
        if module == 'target' or not module:
            module = self.name
        return module

class GitRepo(Repo):
    def checkout(self, dest, target):
        branch = self.node.config.get('jvm', 'GIT_BRANCH')
        url = self.url
        cachekey = re.sub("[@:/]", "_", url)
        gitdir = path.join(os.environ['HOME'], 'gitcache', cachekey)
        if not os.path.exists(gitdir):
            subprocess.check_call(['git', 'clone', '--bare', url, gitdir])
        env = dict(os.environ)
        env['GIT_DIR'] = gitdir
        subprocess.check_call(['git', '--bare', 'fetch', '-f', url, branch], env=env)
        subprocess.check_call(['git', 'branch', '-f', 'todeploy', 'FETCH_HEAD'], env=env)
        subprocess.check_call(['git', 'clone', '--branch', 'todeploy', gitdir, dest])

        with open(path.join(target, 'git-revision'), 'a') as f:
            f.write(branch + '\n')
            f.flush()
            os.chdir(dest)
            subprocess.call(['git', 'log', '-n1'], stdout=f)

class SvnRepo(Repo):
    def checkout(self, dest, target):
        subprocess.call(['id'])
        subprocess.call(['svn', 'co', self.url, dest])
        with open(path.join(target, 'svn-revision'), 'a') as f:
            os.chdir(dest)
            subprocess.call(['svn', 'info'], stdout=f)

def open_repo(url, node):
    if url.startswith('git') or url.startswith('https://github.com'):
        return GitRepo(url, node)
    else:
        return SvnRepo(url, node)

#----------------------------------------------------------------------
# 4. Node Model
#----------------------------------------------------------------------

class Node:
    def __init__(self, name):
        if not name:
            raise ValueError('node name cannot be empty')
        self.name = name
        self.config_file = path.join(CONF_ROOT, self.name) + '.conf'
        self.svc = 'jvm:' + name
        self.apps_path = path.join('/apps', name)
        self.log_file = path.join('/logs', name, 'jetty.log')
        self._config = None
        self._container = None
        self.basedir = '/var/cache/jvmctl/base/' + name

    def __lt__(self, other):
        return self.name < other.name

    @property
    def container(self):
        if self._container is None:
            type_name = self.config.get('jvm', 'CONTAINER')
            ctype = CONTAINER_TYPES.get(type_name)
            if ctype is None:
                sys.stderr.write('Unknown CONTAINER type: ' + type_name + '\n')
                sys.exit(1)
            self._container = ctype(self)
        return self._container

    @property
    def config(self):
        if self._config is None:
            self._config = Config(self.config_file)
        return self._config

    def ensure_valid(self):
        if not path.isfile(self.config_file):
            die(self.config_file + ': not found')
        if subprocess.call(['/bin/bash', '-n', self.config_file]) != 0:
            die(self.config_file + ': syntax error')

    def spawnctl(self, command):
        if os.path.exists('/usr/bin/systemctl'):
            return subprocess.call(['systemctl', command, self.svc])
        else:
            return subprocess.call([control_tools_root + '/bin/spawnctl', command, self.svc])

    def autoregister(self):
        systemd_register(self)

    def port(self):
        f = open(self.config_file)
        try:
            for line in f:
                match = re.match('^\s*PORT=["\'(]*([0-9]+).*', line)
                if match:
                    return match.group(1)
        finally:
            f.close()

    def version(self):
        try:
            with open(path.join(self.apps_path, "git-revision")) as f:
                for line in f:
                    match = re.match('^(?:refs/)?tags/(.*)', line)
                    if match: return match.group(1)
                    match = re.match('^commit (\w{7}).*', line)
                    if match: return match.group(1)
        except IOError:
            pass
        try:
            with open(path.join(self.apps_path, "svn-revision")) as f:
                for line in f:
                    match = re.match('^URL: .*/tags/(?:[a-z_-]+/)(?:[a-z]+-)([^/]*)$', line)
                    if match: return match.group(1).strip()
                    match = re.match('^Revision: (.*)', line)
                    if match: return 'r' + match.group(1)
        except IOError:
            pass


    def pid(self):
        process = subprocess.Popen(['systemctl', 'show', self.svc, '--property=MainPID'], stdout=subprocess.PIPE)
        out = process.communicate()[0]
        retcode = process.poll()
        if retcode:
            return None
        return int(out.split('=')[1].strip())

    @property
    def repos(self):
        return [open_repo(url, self) for url in self.config.get('jvm', 'REPO').split()]

    @property
    def java_home(self):
        return self.config.get('jvm', 'JAVA_HOME')

#----------------------------------------------------------------------
# 5. Command-line Interface
#----------------------------------------------------------------------

@cli_command(group='Process management')
def start(node):
    """update jetty configuration"""
    node.ensure_valid()
    reconfigure(node)
    node.autoregister()
    node.spawnctl('enable')
    sys.exit(node.spawnctl('start'))

@cli_command(group="Process management")
def stop(node):
    """stop the jvm"""
    sys.exit(node.spawnctl('stop'))

@cli_command(group="Process management")
def disable(node):
    """stop the jvm and prevent it from running on startup"""
    sys.exit(node.spawnctl('disable'))

@cli_command(group="Process management")
def enable(node):
    """run the jvm auomatically on startup"""
    node.ensure_valid()
    reconfigure(node)
    node.autoregister()
    sys.exit(node.spawnctl('enable'))

@cli_command(group="Process management")
def restart(node):
    """stop and then start the jvm"""
    if os.getuid() != 0:
        print("restart requires sudo")
        sys.exit(1)
    node.ensure_valid()
    reconfigure(node)
    node.autoregister()
    node.spawnctl('enable')
    sys.exit(node.spawnctl('restart'))

@cli_command(group="Process management")
def status(node):
    """check whether the jvm is running"""
    port = node.port()
    if port is not None:
        print('URL: http://' + socket.gethostname() + ':' + port)
    print('Webapp path: ' + node.apps_path)
    print('Version: ' + (node.version() or 'uknown'))
    print('')
    sys.exit(subprocess.call(['systemctl', 'status', node.svc] + sys.argv[3:]))

@cli_command(group="Configuration")
def version(*args):
    """print jvmctl version"""
    print('jvmctl ' + VERSION)

@cli_command(group="Configuration")
def delete(node):
    """delete the jvm's binaries and configuration"""
    node.spawnctl('stop')
    node.spawnctl('disable')
    if path.exists('/usr/sbin/svccfg'):
        subprocess.call(['/usr/sbin/svccfg', '-s', 'svc:/site/jetty', 'delete', '-f', node.name])
    elif path.exists(path.join('/etc/spawn', node.svc)):
        shutil.rmtree(path.join('/etc/spawn', node.svc))
    if path.exists(node.apps_path):
        print("Removing", node.apps_path)
    	shutil.rmtree(node.apps_path)
    if path.exists(node.config_file):
        print("Removing", node.config_file)
	os.unlink(node.config_file)

@cli_command(group="Debugging")
def log(node):
    """browse the jvm's log file (use -f to follow tail)"""
    logfile = '/logs/%s/stdio.log' % (node.name,)
    if os.path.exists(logfile):
        os.execvp('less', ['less', '-n +F', logfile])
    if os.getuid() != 0:
        print("Hint: try with sudo")
    if 'SYSTEMD_PAGER' not in os.environ:
        os.environ['SYSTEMD_PAGER'] = "LESS=FRXM less"
    os.execvp('journalctl', ['journalctl', '-u', node.svc] + sys.argv[3:])

def find_new_port():
    new_port = 8081
    for node in iter_nodes():
        port = node.port()
        if port is not None:
            port = int(port)
            if port > new_port:
                new_port = port
    return new_port + 10

@cli_command(group="Configuration")
def new(node):
    """configure a new jvm"""
    if path.exists(node.config_file):
        die(node.config_file + ': already exists')
    if path.exists(node.apps_path):
        die(node.apps_path + ': already exists')
    port = find_new_port()
    f = open(node.config_file, 'w')
    try:
        print('PORT=' + str(port), file=f)
        print('', file=f)
        print('#REPO=svn://...', file=f)
        print('#JAVA_OPTS=-Dfoo=bar -Dtop.speed=fast', file=f)
        print('#HEAP_SIZE=128m', file=f)
    finally:
        f.close()

@cli_command(group="Configuration")
def show(node):
    """show the jvm's configuration"""
    f = open(node.config_file)
    try:
        sys.stdout.write(f.read())
    finally:
        f.close()

@cli_command(group="Configuration")
def dump(node):
    """show the jvm's parsed configuration (including defaults)"""
    post_config(node)
    node.config.write(sys.stdout)

@cli_command(group="Configuration")
def config(node):
    """edit the jvm's configuration"""
    if not path.isfile(node.config_file):
        die(node.config_file + ': not found\nTo create it use: jvmctl ' + node.name + ' new')
    if os.getuid() != 0:
        die('config requires sudo')
    if 'EDITOR' not in os.environ:
        os.environ['EDITOR'] = 'vi'
    result = subprocess.call(['sudoedit', node.config_file])
    reconfigure(node)
    os.chdir(CONF_ROOT)
    try:
        subprocess.check_call(['git', 'rev-parse', '--is-inside-work-tree'], stdout=open(os.devnull, 'wb'))
    except:
        subprocess.check_call(['git', 'init'])
    subprocess.check_call(['git', 'add', node.config_file])
    if subprocess.call(['git', 'diff-index', '--quiet', 'HEAD']):
        os.environ['GIT_COMMITTER_NAME'] = 'jvmctl'
        os.environ['GIT_COMMITTER_EMAIL'] = 'root@'+os.uname()[1]
        subprocess.check_call(['git', 'commit', '--author="{0} <{0}@nla.gov.au>"'.format(os.getlogin()), '-m "Config change for {}"'.format(node.name)])
    return result

@cli_command(group="Configuration")
def changed(node):
    """show the last change to the config"""
    os.chdir(CONF_ROOT)
    hash = fetch_hash(node)
    subprocess.check_call(['git', 'show', hash])

@cli_command(group="Configuration")
def revert(node):
    """revert the last change to the config"""
    os.chdir(CONF_ROOT)
    if os.getuid() != 0:
        die('revert requires sudo')
    hash = fetch_hash(node)
    subprocess.check_call(['git', 'revert', hash, '--no-edit'])

@cli_command(group="Process management")
def pid(node):
    """print the process ID of the jvm"""
    pid = node.pid()
    if pid is None:
        die('not running')
    print(pid)

@cli_command(group="Debugging")
def lsof(node):
    """list the jvm's open files and sockets"""
    return subprocess.call(['lsof', '-p', str(node.pid())])

@cli_command(group="Debugging")
def stack(node):
    """print a strack trace for all jvm threads"""
    pid = node.pid()
    stat = os.stat('/proc/%d' % pid)
    jstack = path.join(node.java_home, 'bin/jstack')
    return subprocess.call([jstack, str(pid)],
            preexec_fn=switchuid(stat.st_uid, stat.st_gid))

@cli_command(group="Debugging")
def gcutil(node):
    """print garbage collection statistics"""
    pid = node.pid()
    stat = os.stat('/proc/%d' % pid)
    jstat = path.join(node.java_home, 'bin/jstat')
    return subprocess.call([jstat, '-gcutil', str(pid)] + sys.argv[3:],
            preexec_fn=switchuid(stat.st_uid, stat.st_gid))

def build(node, workarea, args):
    target = path.join(workarea, 'target')
    os.makedirs(target)
    os.environ['PATH'] = node.config.get('jvm', 'JAVA_HOME') + '/bin:/usr/local/bin:/bin:/usr/bin'

    for repo in node.repos:
        moduledir = path.join(workarea, repo.module)
        repo.checkout(moduledir, target)
        os.chdir(moduledir)

        nla_environ = node.config.get('jvm', 'NLA_ENVIRON')
        nla_deploy = path.join(moduledir, 'nla-deploy.sh')
        pom = path.join(moduledir, 'pom.xml')

	env = dict(os.environ)
	for k, v in node.config.items('jvm'):
		env[k] = v

        if '-d' in args:
            print('\nDropping into debug shell. Type "exit" to continue deploy or "exit 1" to abort.')
            subprocess.check_call(os.environ.get('SHELL', '/bin/sh'), env=env)

        if path.exists(nla_deploy):
            subprocess.call(['/bin/bash', '-e', 'nla-deploy.sh', target, nla_environ, node.apps_path], env=env)
        elif path.exists(pom):
            if nla_environ:
                subprocess.call(['mvn', 'package', '-P', nla_environ], env=env)
            else:
                subprocess.call(['mvn', 'package'], env=env)
            wars = glob(path.join(moduledir, 'target/*.war'))
            for war in wars:
                if len(wars) == 1:
                    basename = 'ROOT'
                else:
                    basename = target,re.sub('\.war$', '', path.basename(war))
                unpack = path.join(target, basename)
                os.makedirs(unpack)
                subprocess.call(['unzip', '-d', unpack, war])
            if not wars:
                jars = glob(path.join(moduledir, 'target/*.jar'))
                for jar in jars:
                    if not path.basename(jar).startswith('original-'):
                        print("Copying", jar, "to target")
                        shutil.copy(jar, path.join(target, path.basename(jar)))
        else:
            print('nla.deploy.sh and pom.xml not found')
            print('At least one of them must exist. Bailing.')
            sys.exit(1)

@cli_command(group="Configuration")
def deploy(node, *args):
    """(re)build and redeploy the application"""
    node.ensure_valid()
    if not os.access('/apps', os.W_OK):
        die("Need permission to write to /apps (maybe try sudo?)")
    node.config # ensure config has been read before dropping privileges
    timestamp = time.strftime('%Y%m%d%H%M%S', time.localtime())
    workarea = '/var/tmp/jvmctl-build-%s-%s' % (node.name, timestamp)
    target = path.join(workarea, 'target')
    dest = node.apps_path
    pw = pwd.getpwnam('builder')
    os.chdir('/') # workaround selinux permission problem when we switchuid
    env = dict(os.environ)
    pid = os.fork()
    if pid == 0:
        switchuid(pw.pw_uid, pw.pw_gid)()
        if '-s' in args:
            os.environ['MAVEN_OPTS'] = '-Dmaven.test.skip=true'
        os.environ['HOME'] = pw.pw_dir
        os.environ['WEBAPPS_PATH'] = dest
        os.environ['NODE'] = node.name
        os.environ['WORKAREA'] = workarea
        build(node, workarea, args)
        sys.exit(0)
    else:
        pid, result = os.wait()
    if result != 0:
        die('Build failed. You may inspect ' + workarea)
    if not [f for f in os.listdir(target) if not f.endswith('-revision')]:
        die('Oh dear! ' + target + ' is empty.  I guess the build failed.  Bailing out.')
    newdest = dest + '.new.' + timestamp
    olddest = dest + '.old.' + timestamp
    print()
    print('Copying %s to %s...' % (target, newdest))
    shutil.copytree(target, newdest, symlinks=True)

    print('Stopping %s...' % node.name)
    node.spawnctl('stop')
    print('Swapping in the the version...')
    if path.exists(dest):
        os.rename(dest, olddest)
    os.rename(newdest, dest)

    print('Configuring container...')
    node.container.deploy()
    node.autoregister()

    print('Starting %s...' % node.name)
    if node.spawnctl('start') == 0:
        print("Success! Cleaning up the working area...")
        shutil.rmtree(workarea)
        if os.path.exists(olddest):
            print("Deleting the old version, mwahahaha!")
            shutil.rmtree(olddest)
        node.spawnctl('enable')

    else:
        print("Uh.... something seems to have gone wrong starting up")
        print("I'm leaving the old version for you in %s" % olddest)
    print()
    status(node)

def quote(s):
    if ' ' in s:
        return '"' + s + '"'
    else:
        return s

def fmt_properties(properties):
    return ' '.join(quote('-D' + k + '=' + v) for k,v in properties.items())

def quote_list(list):
    return " ".join(quote(s) for s in list)

@cli_command(group="Hidden")
def reconfigure(node):
    node.container.deploy()
    systemd_register(node)

@cli_command(group="Hidden")
def oomkill(node, pid):
    try_kill_jvm(node, pid)
    try_rename_heap_dump(node)
    send_oom_email(node, pid)


def send_oom_email(node, pid):
    oom_emails = node.config.get('jvm', 'OOM_EMAIL').split()
    mail_from = getpass.getuser() + '@' + socket.gethostname()
    smtp = smtplib.SMTP('localhost')
    try:
        for mail_to in oom_emails:
            message = """\
From: {mail_from}
To: {mail_to}
Subject: JVM-OOM: {name} @ {hostname}

JVM {name} on {hostname} with pid {pid} ran out of memory and was restarted.

Heap dump path: {heap_dump_path}

--
{script}\n""".format(mail_from=mail_from,
                     mail_to=mail_to,
                     name=node.name,
                     pid=pid,
                     hostname=socket.gethostname(),
                     heap_dump_path=node.config.get('jvm', 'HEAP_DUMP_PATH'),
                     script=path.realpath(__file__))
            smtp.sendmail(mail_from, mail_to, message)
    finally:
        smtp.quit()


def try_rename_heap_dump(node):
    "Rename the temporary heap dump file. Replace any previous permanent dump file so we only keep the latest."
    heap_dump_path = node.config.get('jvm', 'HEAP_DUMP_PATH')
    if heap_dump_path and os.path.isfile(heap_dump_path + '.tmp'):
        try:
            os.rename(heap_dump_path + '.tmp', heap_dump_path)
        except OSError:
            pass # if there's a permissions problem or something just give up


def try_kill_jvm(node, pid):
    print('jvmctl oomkill', node.name, pid)
    pid = int(pid)
    try:
        os.kill(pid, signal.SIGKILL)
    except OSError:
        pass


def set_unless_present(config, section, option, value):
    if not config.has_option(section, option):
        config.set(section, option, value)

def post_config(node):
    properties = {
        'jvmctl.node': node.name
    }
    property_opts = fmt_properties(properties) + ' ' + fmt_properties(node.container.properties)
    jvm_opts = ['-Xmx' + node.config.get('jvm', 'HEAP_SIZE'),
                '-XX:OnOutOfMemoryError=/usr/bin/jvmctl oomkill ' + node.name + ' %p']

    heap_dump_path = node.config.get('jvm', 'HEAP_DUMP_PATH')
    if heap_dump_path:
        jvm_opts.append('-XX:+HeapDumpOnOutOfMemoryError')
        if heap_dump_path.endswith("/") or os.path.isdir(heap_dump_path):
            jvm_opts.append('-XX:HeapDumpPath=' + heap_dump_path)
        else:
            jvm_opts.append('-XX:HeapDumpPath=' + heap_dump_path + ".tmp")

    jvm_opts += shlex.split(node.config.get('jvm', 'GC_LOG_OPTS'))
    jvm_opts += shlex.split(node.config.get('jvm', 'JAVA_OPTS'))
    jvm_opts += node.container.jvm_opts

    exec_prefix = node.config.get('jvm', 'EXEC_PREFIX')
    if exec_prefix:
        cmd = exec_prefix + ' '
    else:
        cmd = ''

    cmd += node.java_home + "/bin/java " + property_opts + ' ' + quote_list(jvm_opts)

    socket = node.config.get('jvm', 'SOCKET')
    env_file = path.join(node.basedir, 'environment')

    set_unless_present(node.config, 'systemd.service.Service', 'WorkingDirectory', node.basedir)
    set_unless_present(node.config, 'systemd.service.Service', 'EnvironmentFile', env_file)
    set_unless_present(node.config, 'systemd.service.Service', 'User', node.config.get('jvm', 'USER'))
    set_unless_present(node.config, 'systemd.service.Service', 'ExecStart', cmd.replace('%', '%%%%'))

    if socket:
            socket_unit = 'jvm:' + node.name + '.socket'
            old_after = node.config.get('systemd.service.Unit', 'After')
            node.config.set('systemd.service.Unit', 'After', old_after + ' ' + socket_unit)
            set_unless_present(node.config, 'systemd.service.Unit', 'Requires', socket_unit)
            set_unless_present(node.config, 'systemd.service.Service', 'StandardInput', 'socket')

@cli_command(group="Hidden")
def systemd_register(node):
    post_config(node)

    if not path.exists(node.basedir):
        os.makedirs(node.basedir)

    env_file = node.config.get('systemd.service.Service', 'EnvironmentFile')

    with os.fdopen(os.open(env_file, os.O_WRONLY | os.O_CREAT | os.O_TRUNC, 0600), 'w') as f:
        f.write("# Auto-generated by jvmctl. Edit " + node.config_file + " instead\n")
        f.write('NODE=' + node.name + '\n')
        for k, v in node.config.items('jvm'):
            v = v.replace('\n', ' ')
            f.write(k + "=" + v + "\n")

    socket = node.config.get('jvm', 'SOCKET')
    with open('/etc/systemd/system/' + node.svc + '.service', 'w') as f:
        f.write("# Auto-generated by jvmctl. Edit " + node.config_file + " instead\n")
        conf = RawConfig()
        for section in node.config.sections():
            if not section.startswith('systemd.service.'): continue
            out_section = section.replace('systemd.service.', '')
            conf.add_section(out_section)
            for k, v in node.config.items(section):
                conf.set(out_section, k, v)
        conf.write(f)

    socket_config = '/etc/systemd/system/' + node.svc + '.socket'
    if socket:
        with open(socket_config, 'w') as f:
            f.write("""[Socket]
ListenStream={socket}
SocketMode={socket_mode}
SocketUser={socket_user}
SocketGroup={socket_group}

[Install]
WantedBy=sockets.target
""".format(socket=socket,
                socket_user=node.config.get('jvm', 'SOCKET_USER'),
                socket_group=node.config.get('jvm', 'SOCKET_GROUP'),
                socket_mode=node.config.get('jvm', 'SOCKET_MODE')))

    elif path.exists(socket_config):
        os.unlink(socket_config)

    subprocess.call(['systemctl', 'daemon-reload'])
    if socket:
        subprocess.call(['systemctl', 'enable', node.svc + '.socket'])

@cli_command(group="Debugging")
def run(node):
    """run the application interactively"""
    pass

def fetch_hash(node):
    if not path.isfile(node.config_file):
        die(node.config_file + ': not found\nTo create it use: jvmctl ' + node.name + ' new')
    try:
        hash = subprocess.check_output(['git', 'log', '-n 1', '--pretty=format:%H', node.config_file])
    except:
        die('{} was not found in version control.  Try editing the config with \n jvmctl config {}'.format(node.config_file, node.name))
    if not hash:
        die('no changes found for ' + node.name)
    return hash

def switchuid(uid, gid):
    def f():
        os.setgroups([])
        os.setgid(gid)
        os.setuid(uid)
    return f

def iter_nodes():
    for filename in os.listdir(CONF_ROOT):
        if filename.endswith('.conf'):
            yield Node(filename.split('.', 2)[0])

def list_nodes():
    print('%-30s  %7s  %5s  %s' % ('NODE', 'VERSION', 'PORT', 'STATUS'))
    for node in sorted(iter_nodes(), key=lambda node: node.name):
        pid = node.pid()
        if pid:
            status =  'running as ' + str(pid)
        else:
            status = 'stopped'
        print('%-30s  %7s  %5s  %s' % (node.name,
            node.version() or "-",
            node.port() or "-",
            status))

def die(msg):
    print(sys.argv[0] + ': ' + msg, file=sys.stderr)
    sys.exit(1)

def usage():
    print('Usage: %s <app> <command>' % sys.argv[0])
    print('Control and deploy JVM applications')
    for group, funcs in groups.iteritems():
        if group == 'Hidden': continue
        print()
        print('%s:' % group)
        for func in sorted(funcs, key=lambda f: f.__name__):
            print('  %-10s- %s' % (func.__name__, func.__doc__))
    sys.exit(1)

def main():
    if len(sys.argv) == 2:
        if sys.argv[1] == 'list':
            list_nodes()
        elif sys.argv[1] in ('version', '--version'):
            version()
    elif len(sys.argv) < 3:
        usage()
    else:
        node = sys.argv[1]
        cmd = sys.argv[2]
        args = sys.argv[3:]
        if cmd in commands:
            sys.exit(commands[cmd](Node(node), *args) or 0)
        elif node in commands:
            sys.exit(commands[node](Node(cmd), *args) or 0)
        else:
            print('Unknown command', file=sys.stderr)
            usage()

if __name__ == '__main__': main()
